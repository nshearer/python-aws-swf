# coding=utf-8
from .SWFEvent import SWFEvent

class StartChildWorkflowExecutionFailedEvent(SWFEvent):
    '''
    Failed to process StartChildWorkflowExecution decision. This happens when the decision isn't configured properly, for example the workflow type specified isn't registered.

    'startChildWorkflowExecutionFailedEventAttributes': {
        'workflowType': {
            'name': 'string',
            'version': 'string'
        },
        'cause': 'WORKFLOW_TYPE_DOES_NOT_EXIST'|'WORKFLOW_TYPE_DEPRECATED'|'OPEN_CHILDREN_LIMIT_EXCEEDED'|'OPEN_WORKFLOWS_LIMIT_EXCEEDED'|'CHILD_CREATION_RATE_EXCEEDED'|'WORKFLOW_ALREADY_RUNNING'|'DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED'|'DEFAULT_TASK_LIST_UNDEFINED'|'DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED'|'DEFAULT_CHILD_POLICY_UNDEFINED'|'OPERATION_NOT_PERMITTED',
        'workflowId': 'string',
        'initiatedEventId': 123,
        'decisionTaskCompletedEventId': 123,
        'control': 'string'
    },
    '''

    

    @property
    def workflow_type(self):
        '''
        The workflow type provided in the StartChildWorkflowExecution   Decision that failed.
    
        name (string) --
        The name of the workflow type.
    
        Note
        The combination of workflow type name and version must be unique with in a domain.
    
    
        version (string) --
        The version of the workflow type.
    
        Note
        The combination of workflow type name and version must be unique with in a domain.
    
        :return dict:
        '''
        return self._get_data_attr('workflowType')
    
    
    @property
    def cause(self):
        '''
        The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
    
        Note
        When cause is set to OPERATION_NOT_PERMITTED , the decision fails because it lacks sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide .
    
        :return string:
        '''
        return self._get_data_attr('cause')
    
    
    @property
    def workflow_id(self):
        '''
        The workflowId of the child workflow execution.
    
        :return string:
        '''
        return self._get_data_attr('workflowId')
    
    
    @property
    def initiated_event_id(self):
        '''
        When the cause is WORKFLOW_ALREADY_RUNNING , initiatedEventId is the ID of the StartChildWorkflowExecutionInitiated event that corresponds to the StartChildWorkflowExecution   Decision to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.
        When the cause isn't WORKFLOW_ALREADY_RUNNING , initiatedEventId is set to 0 because the StartChildWorkflowExecutionInitiated event doesn't exist.
    
        :return integer:
        '''
        return self._get_data_attr('initiatedEventId')
    
    
    @property
    def decision_task_completed_event_id(self):
        '''
        The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution   Decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
    
        :return integer:
        '''
        return self._get_data_attr('decisionTaskCompletedEventId')
    
    
    @property
    def control(self):
        '''
        The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
    
        :return string:
        '''
        return self._get_data_attr('control')
    
    
